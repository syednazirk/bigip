{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "2.2.0.0",
  "parameters": {
    "adminUsername": {
      "defaultValue": "azureuser",
      "metadata": {
        "description": "Admin username applied to BIG-IP Virtual Machine."
      },
      "type": "string"
    },
    "bigIpPeerAddr": {
      "defaultValue": "",
      "metadata": {
        "description": "Type the static self IP address of the remote host here. Leave empty if not configuring peering with a remote host on this device."
      },
      "type": "string"
    },
    "bigIpRuntimeInitPackageUrl": {
      "defaultValue": "https://cdn.f5.com/product/cloudsolutions/f5-bigip-runtime-init/v1.4.2/dist/f5-bigip-runtime-init-1.4.2-1.gz.run",
      "metadata": {
        "description": "URL for BIG-IP Runtime Init package"
      },
      "type": "string"
    },
    "cfeStorageAccountName": {
      "defaultValue": "",
      "metadata": {
        "description": "CFE storage account created and used for cloud-failover-extension."
      },
      "type": "string"
    },
    "cfeTag": {
      "defaultValue": "",
      "metadata": {
        "description": "Cloud Failover deployment tag value."
      },
      "type": "string"
    },
    "image": {
      "defaultValue": "f5-networks:f5-big-ip-best:f5-bigip-virtual-edition-25m-best-hourly:15.1.201000",
      "metadata": {
        "description": "2 formats accepted. URN of the image to use in Azure marketplace or id of custom image. Example URN value: f5-networks:f5-big-ip-byol:f5-big-all-2slot-byol:16.0.101000. You can find the URNs of F5 marketplace images in the README for this template or by running the command: az vm image list --output yaml --publisher f5-networks --all. See https://clouddocs.f5.com/cloud/public/v1/azure/Azure_download.html for information on creating custom BIG-IP image."
      },
      "type": "string"
    },
    "instanceType": {
      "defaultValue": "Standard_D8_v3",
      "metadata": {
        "description": "Enter valid instance type."
      },
      "type": "string"
    },
    "mgmtSubnetId": {
      "metadata": {
        "description": "The resource ID of the management subnet."
      },
      "type": "string"
    },
    "mgmtNsgId": {
      "defaultValue": "",
      "metadata": {
        "description": "The resource ID of a network security group to apply to the management network interface."
      },
      "type": "string"
    },
    "mgmtPublicIpId": {
      "defaultValue": "",
      "metadata": {
        "description": "The resource ID of the public IP address to apply to the management network interface. Leave this parameter blank to create a management network interface without a public IP address."
      },
      "type": "string"
    },
    "mgmtSelfIp": {
      "defaultValue": "",
      "metadata": {
        "description": "The private IP address to apply to the primary IP configuration on the management network interface. The address must reside in the subnet provided in the mgmtSubnetId parameter."
      },
      "type": "string"
    },
    "nic1SubnetId": {
      "defaultValue": "",
      "metadata": {
        "description": "The resource ID of the external subnet."
      },
      "type": "string"
    },
    "nic1NsgId": {
      "defaultValue": "",
      "metadata": {
        "description": "The optional resource ID of a network security group to apply to the external network interface."
      },
      "type": "string"
    },
    "nic1PrimaryPublicId": {
      "defaultValue": "",
      "metadata": {
        "description": "The resource ID of the public IP address to apply to the primary IP configuration on the external network interface."
      },
      "type": "string"
    },
    "nic1SelfIp": {
      "defaultValue": "",
      "metadata": {
        "description": "The private IP address to apply to the primary IP configuration on the external network interface. The address must reside in the subnet provided in the nic1SubnetId parameter."
      },
      "type": "string"
    },
    "nic1ServiceIPs": {
      "defaultValue": [],
      "metadata": {
        "description": "An array of one or more public/private IP address pairs to apply to the secondary external IP configurations on the first non-management network interface. The private addresses must reside in the subnet provided in the same subnet as the network interface, if deploying with 2 or more network interfaces. When deploying a 1 NIC BIG-IP VE, these IP configurations will be created on the management network interface, and the addresses must reside in the subnet provided in the mgmtSubnetId parameter."
      },
      "type": "array"
    },
    "nic2SubnetId": {
      "defaultValue": "",
      "metadata": {
        "description": "The resource ID of the internal subnet."
      },
      "type": "string"
    },
    "nic2NsgId": {
      "defaultValue": "",
      "metadata": {
        "description": "The optional resource ID of a network security group to apply to the internal network interface."
      },
      "type": "string"
    },
    "nic2PrimaryPublicId": {
      "defaultValue": "",
      "metadata": {
        "description": "The resource ID of the public IP address to apply to the primary IP configuration on the internal network interface."
      },
      "type": "string"
    },
    "nic2SelfIp": {
      "defaultValue": "",
      "metadata": {
        "description": "The private IP address to apply to the primary IP configuration on the internal network interface. The address must reside in the subnet provided in the nic2SubnetId parameter."
      },
      "type": "string"
    },
    "nic2ServiceIPs": {
      "defaultValue": [],
      "metadata": {
        "description": "An array of one or more public/private IP address pairs to apply to the secondary external IP configurations on the second non-management network interface. The private addresses must reside in the subnet provided in the same subnet as the network interface, if deploying with 2 or more network interfaces. When deploying a 1 NIC BIG-IP VE, these IP configurations will be created on the management network interface, and the addresses must reside in the subnet provided in the mgmtSubnetId parameter."
      },
      "type": "array"
    },
    "roleDefinitionId": {
      "defaultValue": "",
      "metadata": {
        "description": "Enter a role definition id you wish to add to system managed identity. Leave default if system managed identity is not used."
      },
      "type": "string"
    },
    "bigIpRuntimeInitConfig": {
      "metadata": {
        "description": "Supply a URL to the bigip-runtime-init configuration file in YAML or JSON format, or an escaped JSON string to use for f5-bigip-runtime-init configuration."
      },
      "type": "string"
    },
    "sshKey": {
      "metadata": {
        "description": "REQUIRED - Supply the public key that will be used for SSH authentication to the BIG-IP and application virtual machines."
      },
      "type": "string"
    },
    "licenseKey": {
      "metadata": {
        "description": "REQUIRED - Supply valid license Key."
      },
      "type": "string"
    },    
    "kodiakf5Password": {
      "metadata": {
        "description": "Password should be min 11 characters and comnination of atleast one lower case character, one upper case character, one numeral and one special character limited to (% * + , - . / : = ? [ ] ^ _ ~ space# )"
      },
      "type": "string"
    },    
    "tagValues": {
      "defaultValue": {
        "application": "APP",
        "cost": "COST",
        "environment": "ENV",
        "group": "GROUP",
        "owner": "OWNER"
      },
      "metadata": {
        "description": "Default key/value resource tags will be added to the resources in this deployment, if you would like the values to be unique adjust them as needed for each key."
      },
      "type": "object"
    },
    "uniqueString": {
      "metadata": {
        "description": "REQUIRED - A prefix that will be used to name template resources. Because some resources require globally unique names, we recommend using a unique value."
      },
      "type": "string"
    },
    "useAvailabilityZones": {
      "defaultValue": false,
      "metadata": {
        "description": "This deployment can deploy resources into Azure Availability Zones (if the region supports it).  If that is not desired the input should be set false. If the region does not support availability zones the input should be set to false."
      },
      "type": "bool"
    },
    "userAssignManagedIdentity": {
      "defaultValue": "",
      "metadata": {
        "description": "Enter user assigned management identity ID to be associated to vmss. Leave default if not used."
      },
      "type": "string"
    },
    "vmName": {
      "defaultValue": "bigip-vm",
      "metadata": {
        "description": "Name to use for Virtual Machine."
      },
      "type": "string"
    },
    "workspaceId": {
      "metadata": {
        "description": "Log Analytics workspace ID used by Telemetry Streaming for sending logs"
      },
      "type": "string",
      "defaultValue": "WORKSPACE_ID"
    }
  },
  "variables": {
    "customData": "[base64(concat('#!/bin/bash -x\n\n# Log to local file and serial console\nmkdir -p /var/log/cloud /config/cloud /var/config/rest/downloads\nLOG_FILE=/var/log/cloud/startup-script.log\ntouch ${LOG_FILE}\nnpipe=/tmp/$$.tmp\ntrap \"rm -f $npipe\" EXIT\nmknod $npipe p\ntee <$npipe -a ${LOG_FILE} /dev/ttyS0 &\nexec 1>&-\nexec 1>$npipe\nexec 2>&1\n\necho \"$(date  +\"%Y-%m-%dT%H:%M:%S.%3NZ\") : Starting Custom Script\"\n# Optional optimizations required as early in boot as possible before mcpd starts\n/usr/bin/setdb provision.extramb 1000\n/usr/bin/setdb restjavad.useextramb true\n\n# VARS FROM TEMPLATE\nPACKAGE_URL=', variables('singleQuote'), parameters('bigIpRuntimeInitPackageUrl'), variables('singleQuote'), '\nRUNTIME_CONFIG=',  variables('singleQuote'), parameters('bigIpRuntimeInitConfig'), variables('singleQuote'), '\nREG_KEY=',variables('singleQuote'), parameters('licenseKey'),variables('singleQuote'), '\n\n# Render or download f5-bigip-runtime-init config\nif [[ \"${RUNTIME_CONFIG}\" =~ ^http.* ]]; then\n    for i in {1..30}; do\n        curl -sfv --retry 1 --connect-timeout 5 -L \"${RUNTIME_CONFIG}\" -o /config/cloud/runtime-init.conf && break || sleep 10;\n    done\n    echo \" sed -i s/AAAAA-BBBBB-CCCCC-DDDDD-EEEEEEE/${REG_KEY}/g /config/cloud/runtime-init.conf\"\nsed -i \"s/AAAAA-BBBBB-CCCCC-DDDDD-EEEEEEE/\"${REG_KEY}\"/g\" /config/cloud/runtime-init.conf \nelse\n  printf ', variables('singleQuote'), '%s\\n', variables('singleQuote'), ' \"${RUNTIME_CONFIG}\" | jq . > /config/cloud/runtime-init.conf\nfi\n\n# Download and install f5-bigip-runtime-init package\nif [[ ! -s \"/var/config/rest/downloads/${PACKAGE_URL##*/}\" ]]; then\n  for i in {1..30}; do\n    curl -fv --retry 1 --connect-timeout 5 -L \"${PACKAGE_URL}\" -o \"/var/config/rest/downloads/${PACKAGE_URL##*/}\" && break || sleep 10\n  done\nfi\nbash \"/var/config/rest/downloads/${PACKAGE_URL##*/}\" -- ', variables('singleQuote'), '--cloud azure --telemetry-params templateName:v2.2.0.0/examples/modules/bigip-standalone/bigip.json', variables('singleQuote'), '\n\n# Run\nf5-bigip-runtime-init --config-file /config/cloud/runtime-init.conf\n'))]",
    "diagnosticsStorageAccountName": "[concat(uniqueString(parameters('uniqueString'), resourceGroup().id, deployment().name), 'data000')]",
    "emptyArray": [],
    "extSettingsRef": {
      "commandToExecute": "[concat('echo -e ', variables('customData'), ' > /var/lib/waagent/CustomData; bash -c \"base64 -d /var/lib/waagent/CustomData | bash\"')]"
    },
    "identity": "[if(empty(parameters('userAssignManagedIdentity')), variables('identitySys'), variables('identitySysUser'))]",
    "identitySys": {
      "type": "SystemAssigned"
    },
    "identitySysUser": {
      "type": "[if(empty(parameters('roleDefinitionId')), 'UserAssigned', 'SystemAssigned, UserAssigned')]",
      "userAssignedIdentities": {
        "[parameters('userAssignManagedIdentity')]": {}
      }
    },
    "image": "[if(variables('useCustomImage'), parameters('image'), split(parameters('image'), ':'))]",
    "imagePlan": {
      "name": "[variables('skuToUse')]",
      "product": "[variables('offerToUse')]",
      "publisher": "f5-networks"
    },
    "imageReference": {
      "offer": "[variables('offerToUse')]",
      "publisher": "f5-networks",
      "sku": "[variables('skuToUse')]",
      "version": "[variables('versionToUse')]"
    },
    "copy": [
      {
        "count": "[length(parameters('nic1ServiceIPs'))]",
        "input": {
          "name": "[concat(parameters('vmName'), '-ipconfig-nic1-secondary', copyIndex('constructNic1ServiceIpConfigs'))]",
          "properties": {
            "publicIpAddress": "[if(and(contains(parameters('nic1ServiceIPs')[copyIndex('constructNic1ServiceIpConfigs')], 'publicIpId'), not(empty(parameters('nic1ServiceIPs')[copyIndex('constructNic1ServiceIpConfigs')].publicIpId))), json(concat('{\"id\": \"', parameters('nic1ServiceIPs')[copyIndex('constructNic1ServiceIpConfigs')].publicIpId, '\"}')), json('null'))]",
            "primary": false,
            "privateIpAddress": "[parameters('nic1ServiceIPs')[copyIndex('constructNic1ServiceIpConfigs')].privateIpAddress]",
            "privateIpAllocationMethod": "Static",
            "subnet": {
              "id": "[if(equals(variables('networkInterfaceCount'), 1), parameters('mgmtSubnetId'), parameters('nic1SubnetId'))]"
            }
          }
        },
        "name": "constructNic1ServiceIpConfigs"
      },
      {
        "count": "[length(parameters('nic2ServiceIPs'))]",
        "input": {
          "name": "[concat(parameters('vmName'), '-ipconfig-nic2-secondary', copyIndex('constructNic2ServiceIpConfigs'))]",
          "properties": {
            "publicIpAddress": "[if(and(contains(parameters('nic2ServiceIPs')[copyIndex('constructNic2ServiceIpConfigs')], 'publicIpId'), not(empty(parameters('nic2ServiceIPs')[copyIndex('constructNic2ServiceIpConfigs')].publicIpId))), json(concat('{\"id\": \"', parameters('nic2ServiceIPs')[copyIndex('constructNic2ServiceIpConfigs')].publicIpId, '\"}')), json('null'))]",
            "primary": false,
            "privateIpAddress": "[parameters('nic2ServiceIPs')[copyIndex('constructNic2ServiceIpConfigs')].privateIpAddress]",
            "privateIpAllocationMethod": "Static",
            "subnet": {
              "id": "[if(equals(variables('networkInterfaceCount'), 1), parameters('mgmtSubnetId'), parameters('nic2SubnetId'))]"
            }
          }
        },
        "name": "constructNic2ServiceIpConfigs"
      }
    ],
    "ipConfigurationMgmtPrimary": [
      {
        "name": "[concat(parameters('vmName'), '-ipconfig-primary0')]",
        "properties": {
          "publicIpAddress": "[if(empty(parameters('mgmtPublicIpId')), json('null'), json(concat('{\"id\": \"', parameters('mgmtPublicIpId'), '\"}')))]",
          "primary": true,
          "privateIpAddress": "[if(empty(parameters('mgmtSelfIP')), json('null'), parameters('mgmtSelfIP'))]",
          "privateIpAllocationMethod": "[if(empty(parameters('mgmtSelfIP')), 'Dynamic', 'Static')]",
          "subnet": {
            "id": "[parameters('mgmtSubnetId')]"
          }
        }
      }
    ],
    "ipConfigurationNic1Primary": [
      {
        "name": "[concat(parameters('vmName'), '-ipconfig-primary0')]",
        "properties": {
          "publicIpAddress": "[if(empty(parameters('nic1PrimaryPublicId')), json('null'), json(concat('{\"id\": \"', parameters('nic1PrimaryPublicId'), '\"}')))]",
          "primary": true,
          "privateIpAddress": "[if(empty(parameters('nic1SelfIp')), json('null'), parameters('nic1SelfIp'))]",
          "privateIpAllocationMethod": "[if(empty(parameters('nic1SelfIp')), 'Dynamic', 'Static')]",
          "subnet": {
            "id": "[parameters('nic1SubnetId')]"
          }
        }
      }
    ],
    "ipConfigurationNic2Primary": [
      {
        "name": "[concat(parameters('vmName'), '-ipconfig-primary0')]",
        "properties": {
          "publicIpAddress": "[if(empty(parameters('nic2PrimaryPublicId')), json('null'), json(concat('{\"id\": \"', parameters('nic2PrimaryPublicId'), '\"}')))]",
          "primary": true,
          "privateIpAddress": "[if(empty(parameters('nic2SelfIp')), json('null'), parameters('nic2SelfIp'))]",
          "privateIpAllocationMethod": "[if(empty(parameters('nic2SelfIp')), 'Dynamic', 'Static')]",
          "subnet": {
            "id": "[parameters('nic2SubnetId')]"
          }
        }
      }
    ],
    "ipConfigurationsMgmt": "[if(equals(variables('networkInterfaceCount'), 1), union(variables('ipConfigurationMgmtPrimary'), variables('constructNic1ServiceIpConfigs'), variables('constructNic2ServiceIpConfigs')), variables('ipConfigurationMgmtPrimary'))]",
    "ipConfigurationsNic1": "[union(variables('ipConfigurationNic1Primary'), variables('constructNic1ServiceIpConfigs'))]",
    "ipConfigurationsNic2": "[union(variables('ipConfigurationNic2Primary'), variables('constructNic2ServiceIpConfigs'))]",
    "networkInterfaceCount": "[add(add(if(empty(parameters('mgmtSubnetId')), 0, add(0, 1)), if(empty(parameters('nic1SubnetId')), 0, add(0, 1))), if(empty(parameters('nic2SubnetId')), 0, add(0, 1)))]",
    "networkInterfaceName0": "[concat(parameters('uniqueString'), '-nic0')]",
    "networkInterfaceName1": "[concat(parameters('uniqueString'), '-nic1')]",
    "networkInterfaceName2": "[concat(parameters('uniqueString'), '-nic2')]",
    "networkInterfaces": "[union(createArray(variables('networkInterfacesArray')[0]), if(empty(parameters('nic1SubnetId')), variables('emptyArray'), createArray(variables('networkInterfacesArray')[1])), if(empty(parameters('nic2SubnetId')), variables('emptyArray'), createArray(variables('networkInterfacesArray')[2])))]",
    "networkInterfacesArray": [
      {
        "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName0'))]",
        "properties": {
          "primary": true
        }
      },
      {
        "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName1'))]",
        "properties": {
          "primary": false
        }
      },
      {
        "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName2'))]",
        "properties": {
          "primary": false
        }
      }
    ],
    "offerToUse": "[if(variables('useCustomImage'), json('null'), variables('image')[1])]",
    "singleQuote": "'",
    "skuToUse": "[if(variables('useCustomImage'), json('null'), variables('image')[2])]",
    "storageProfileArray": {
      "customImage": {
        "imageReference": {
          "id": "[variables('image')]"
        }
      },
      "platformImage": {
        "imageReference": "[variables('imageReference')]",
        "osDisk": {
          "createOption": "FromImage"
        }
      }
    },
    "useCustomImage": "[contains(tolower(parameters('image')), 'microsoft.compute')]",
    "versionToUse": "[if(variables('useCustomImage'), json('null'), variables('image')[3])]",
    "vmId": "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]",
    "runtimeInitTag": {
      "workspaceId": "[parameters('workspaceId')]",
      "uniqueString": "[parameters('uniqueString')]"
    },
    "cfeStorageAccountName": "[if(not(empty(parameters('cfeStorageAccountName'))), parameters('cfeStorageAccountName'), parameters('uniqueString'))]",
    "cfeTag": {
      "f5_cloud_failover_label": "[parameters('cfeTag')]"
    },
    "cfeTagValue": "[union(if(empty(parameters('tagValues')), json('null'), parameters('tagValues')), variables('cfeTag'))]",
    "bigIpPeerTag": {
      "bigIpPeerAddr": "[parameters('bigIpPeerAddr')]"
    }
  },
  "resources": [
    {
      "apiVersion": "2021-04-01",
      "condition": "[not(empty(parameters('cfeStorageAccountName')))]",
      "kind": "Storage",
      "location": "[resourceGroup().location]",
      "name": "[variables('cfeStorageAccountName')]",
      "properties": {
        "supportsHttpsTrafficOnly": true
      },
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "tags": "[variables('cfeTagValue')]",
      "type": "Microsoft.Storage/storageAccounts"
    },
    {
      "apiVersion": "2021-04-01",
      "kind": "Storage",
      "location": "[resourceGroup().location]",
      "name": "[variables('diagnosticsStorageAccountName')]",
      "properties": {
        "supportsHttpsTrafficOnly": true
      },
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
      "type": "Microsoft.Storage/storageAccounts"
    },
    {
      "apiVersion": "2020-06-01",
      "location": "[resourceGroup().location]",
      "name": "[variables('networkInterfaceName0')]",
      "properties": {
        "ipConfigurations": "[variables('ipConfigurationsMgmt')]",
        "networkSecurityGroup": {
          "id": "[parameters('mgmtNsgId')]"
        }
      },
      "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
      "type": "Microsoft.Network/networkInterfaces"
    },
    {
      "apiVersion": "2020-06-01",
      "condition": "[not(empty(parameters('nic1SubnetId')))]",
      "location": "[resourceGroup().location]",
      "name": "[variables('networkInterfaceName1')]",
      "properties": {
        "ipConfigurations": "[variables('ipConfigurationsNic1')]",
        "networkSecurityGroup": {
          "id": "[parameters('nic1NsgId')]"
        }
      },
      "tags": "[union(variables('cfeTagValue'), json(concat('{\"f5_cloud_failover_nic_map\": \"nic1\"}')))]",
      "type": "Microsoft.Network/networkInterfaces"
    },
    {
      "apiVersion": "2020-06-01",
      "condition": "[not(empty(parameters('nic2SubnetId')))]",
      "location": "[resourceGroup().location]",
      "name": "[variables('networkInterfaceName2')]",
      "properties": {
        "ipConfigurations": "[variables('ipConfigurationsNic2')]",
        "networkSecurityGroup": {
          "id": "[parameters('nic2NsgId')]"
        }
      },
      "tags": "[union(variables('cfeTagValue'), json(concat('{\"f5_cloud_failover_nic_map\": \"nic2\"}')))]",
      "type": "Microsoft.Network/networkInterfaces"
    },
    {
      "apiVersion": "2019-12-01",
      "dependsOn": [
        "[variables('diagnosticsStorageAccountName')]",
        "[variables('networkInterfaceName0')]",
        "[variables('networkInterfaceName1')]",
        "[variables('networkInterfaceName2')]"
      ],
      "location": "[resourceGroup().location]",
      "identity": "[if(and(empty(parameters('userAssignManagedIdentity')), empty(parameters('roleDefinitionId'))), json('null'), variables('identity'))]",
      "name": "[parameters('vmName')]",
      "plan": "[if(variables('useCustomImage'), json('null'), variables('imagePlan'))]",
      "properties": {
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[concat('https://', variables('diagnosticsStorageAccountName'), '.blob.', environment().suffixes.storage)]"
          }
        },
        "hardwareProfile": {
          "vmSize": "[parameters('instanceType')]"
        },
        "networkProfile": {
          "networkInterfaces": "[variables('networkInterfaces')]"
        },
        "osProfile": {
          "adminUsername": "[parameters('adminUsername')]",
          "computerName": "[parameters('vmName')]",
          "customData": "[json('null')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": true,
            "ssh": {
              "publicKeys": [
                {
                  "keyData": "[parameters('sshKey')]",
                  "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]"
                }
              ]
            }
          }
        },
        "storageProfile": "[if(variables('useCustomImage'), variables('storageProfileArray').customImage, variables('storageProfileArray').platformImage)]"
      },
      "tags": "[union(variables('runtimeInitTag'), variables('bigIpPeerTag'), parameters('tagValues'))]",
      "zones": "[if(parameters('useAvailabilityZones'), createArray(1), json('null'))]",
      "type": "Microsoft.Compute/virtualMachines"
    },
    {
      "apiVersion": "2021-04-01-preview",
      "condition": "[not(empty(parameters('roleDefinitionId')))]",
      "dependsOn": [
        "[variables('vmId')]"
      ],
      "name": "[guid(resourceGroup().id, 'roleId')]",
      "properties": {
        "principalId": "[reference(variables('vmId'), '2019-12-01', 'Full').identity.principalId]",
        "roleDefinitionId": "[parameters('roleDefinitionId')]",
        "scope": "[resourceGroup().id]"
      },
      "type": "Microsoft.Authorization/roleAssignments"
    },
    {
      "apiVersion": "2019-12-01",
      "dependsOn": [
        "[variables('vmId')]",
        "[guid(resourceGroup().id, 'roleId')]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[concat(parameters('vmName'),'/onboarder')]",
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "settings": "[variables('extSettingsRef')]",
        "type": "CustomScript",
        "typeHandlerVersion": "2.0"
      },
      "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
      "type": "Microsoft.Compute/virtualMachines/extensions"
    }
  ],
  "outputs": {
    "selfPrivateIp0": {
      "condition": "[not(empty(parameters('mgmtSubnetId')))]",
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName0')),'2020-06-01').ipConfigurations[0].properties.privateIPAddress]"
    },
    "selfPrivateIp1": {
      "condition": "[not(empty(parameters('nic1SubnetId')))]",
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName1')),'2020-06-01').ipConfigurations[0].properties.privateIPAddress]"
    },
    "selfPrivateIp2": {
      "condition": "[not(empty(parameters('nic2SubnetId')))]",
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName2')),'2020-06-01').ipConfigurations[0].properties.privateIPAddress]"
    },
    "roleAssignmentId": {
      "condition": "[not(empty(parameters('roleDefinitionId')))]",
      "type": "string",
      "value": "[concat('/subscriptions/',subscription().subscriptionId, '/resourcegroups/',  resourceGroup().name, '/providers/Microsoft.Authorization/roleAssignments/', guid(resourceGroup().id, 'roleId'))]"
    },
    "vmId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')),'2019-12-01').vmId]"
    }
  }
}
